#!/bin/bash
#Modified for GIT


PATH=/usr/local/bin:/bin:/usr/bin:/home/deploy/bin
IFS="     
";
unset LD_PRELOAD
unset TZ

username=$(id -nu)
if [ "deploy" != "$username" ];then
   echo "Executing $0 as deploy"
   sudo -H -u deploy $0 "$@" 2>&1 | tee -a ~/dnspush.log

   exit 0
fi


testmode=no
revision=HEAD
umask 0002

while [ $# -gt 0 ];do
   case $1 in
      --test) testmode=yes; shift;;
      --clean) rm -rf /tmp/dnspush-*; exit;;
      -r) shift; revision=$1; shift;;
      *) echo "$0 [-r rev] [--test] [--clean]"; exit;;
   esac
done

hide=:
unset test
dryrun=""
if [ "yes" = "$testmode" ];then
  test="-test"
  dryrun="--dryrun"
  #rm -rf /tmp/dnspush-*
  echo "*** TEST MODE ***"
  sleep 1
fi

timestamp=$(date +%Y%m%d-%H%M%S)

#dnssvnpath=https://svn.gnmedia.net/sysadmins/trunk/dns
dnsgitpath=git@github.com:/EvolveMedia/tp_dns
dnsintmasters="app1v-dnsint.tp.prd.lax.gnmedia.net"
dnspubmasters="app1v-dnsext.tp.prd.lax.gnmedia.net"
dnsintslaves=$(echo app{1,2,3,4}v-dns.tp.prd.lax.gnmedia.net)
#dnsintslaves=$(echo app{1,2,3,4}v-dns.tp.prd.lax.gnmedia.net uid1v-gstaples.tp.dev.lax.gnmedia.net)
dnspubslaves=$(echo ns{3,4,5,6}.gorillanation.com)
#dnsalsonotify="192.168.1.175"
dnsalsonotify=""

set -e  # bail at the first sign of error


#################################################
### No user-serviceable parts below this line ###
#################################################
tmpdir=/tmp/r53check-$$.$RANDOM
mkdir $tmpdir
cd $tmpdir
#svn co -r $revision $dnssvnpath > /dev/null
git clone $dnsgitpath dns > /dev/null
cd dns
git checkout $revision

#echo "*** Generating zone confs..."
cd configs
./mastergenerator
./slavegenerator
rm -f */zone-table
cd ..
#find $tmpdir -name .svn | xargs rm -rf
find $tmpdir -name .git | xargs rm -rf
mkdir pub



####
#### Step 1
#### Check the zone files and create "pub" versions
#### The "zones" directory gets the internal files straight from git
####
cd zones
#echo "Foome broken" >> ./real-moms.com.hosts
for file in $(find . -type f -a -not \( -name named.ca -o -name .\* \) );do

  # named-checkzone requires zone name for checking, but it might
  # take a few tries to figure it out.
  zone=$(cat $file | awk '$3=="SOA" {print $1}' | head -1)
  if [ -z "$zone" -o "@" = "$zone" ];then
     zone=$(cat $file | awk '$1=="$ORIGIN" {print $2}' | head -1)
  fi
  if [ -z "$zone" -o "@" = "$zone" ];then
     zone=$(basename $file .hosts)
  fi
  if [ -z "$zone" ];then
     zone="@"
  fi


  /usr/sbin/named-checkzone -q -n fail -k fail $zone $file || {
     # Do it again to show the error
     echo "Failed ($zone) $file"
     /usr/sbin/named-checkzone -n fail -k fail $zone $file
     exit 1
   }
  #echo "Checked $file ($zone): success"

  mkdir -p ../pub/$(dirname $file)
  sed \
       -e '/[[:space:]]NS[[:space:]]/s/ns1v.lax1/ns5/' \
       -e '/[[:space:]]NS[[:space:]]/s/ns2v.lax1/ns6/' \
       -e '/[[:space:]]NS[[:space:]]/s/ns1v.lax2/ns3/' \
       -e '/[[:space:]]NS[[:space:]]/s/ns2v.lax2/ns4/' \
       -e '/[[:space:]]NS[[:space:]]/s/app1v.dns.tp.prd.lax/ns3/' \
       -e '/[[:space:]]NS[[:space:]]/s/app2v.dns.tp.prd.lax/ns4/' \
       -e '/[[:space:]]NS[[:space:]]/s/app3v.dns.tp.prd.lax/ns5/' \
       -e '/[[:space:]]NS[[:space:]]/s/app4v.dns.tp.prd.lax/ns6/' \
       -e '/[[:space:]]NS[[:space:]][[:space:]]*ns1v.lax3/d' \
       -e '/[[:space:]]NS[[:space:]][[:space:]]*ns2v.lax3/d' \
       < $file > ../pub/$file

       # This is testing ... one day this will apply to all zones
       case $zone in
          g*) : ;;
          [a-m]*) sed -i '/[[:space:]]10\.1[012]\./d' ../pub/$file;;
       esac 

  sed -i /dnsmadeeasy/d $file
  /usr/sbin/named-checkzone -q -n fail -k fail $zone ../pub/$file || {
     # Do it again to show the error
     echo "Failed ($zone) ../pub/$file"
     /usr/sbin/named-checkzone -n fail -k fail $zone ../pub/$file
     exit 1
   }
  #echo "Checked: ../pub/$file ($zone): success"
  rm -rf ../pub/internal

done
cp named.ca ../pub/named.ca
#echo "All zone files created and checked."
echo "Checking all zones in git against Route53....this may take some time.";

       for f in $(find . -name \*.hosts);
        do
        /usr/local/bin/r53iszone $f > /dev/null
            RETVAL=$?
            if [ $RETVAL -ne 0 ]; then
                echo "$f does not exist on Route53."
            fi
        done


echo "Check Complete."

cd /tmp
rm -fr $tmpdir
