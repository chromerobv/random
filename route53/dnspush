#!/bin/bash
#Modified for GIT

PATH=/usr/local/bin:/bin:/usr/bin:/home/em-deploy/bin
IFS="     
";
unset LD_PRELOAD
unset TZ

username=$(id -nu)
if [ "em-deploy" != "$username" ];then
   echo "Executing $0 as em-deploy"
   sudo -H -u em-deploy $0 "$@" 2>&1 | tee -a ~/dnspush.log

   exit 0
fi


testmode=no
slavepush=no
revision="HEAD"
r53fullsync=no
umask 0002
while [ $# -gt 0 ];do
   case $1 in
      --test) testmode=yes; shift;;
      --slavepush) slavepush=yes; shift;;
      --r53full) r53fullsync=yes; shift;;
      --clean) rm -rf /tmp/dnspush-*; exit;;
      -r) shift; revision=$1; shift;;
      *) echo "$0 [-r rev] [--test] [--clean] [--slavepush] [--r53full]"; exit;;
   esac
done

hide=:
unset test
dryrun=""
if [ "yes" = "$testmode" ];then
  test="-test"
  dryrun="--dryrun"
  #rm -rf /tmp/dnspush-*
  echo "*** TEST MODE ***"
  sleep 1
fi

timestamp=$(date +%Y%m%d-%H%M%S)
echo "*** Look for \"DNS Push Complete\" at the end. ***"
echo "*** Output is saved to your ~/dnspush.log ***"
sleep 1
echo -n "In "
for a in 5 4 3 2 1;do
  echo -n "$a... "
  sleep 1
done
echo "GO!"
sleep 1
echo
echo "Starting dnspush (revision: $revision) at:" $(date)

#dnssvnpath=https://svn.gnmedia.net/sysadmins/trunk/dns
dnsgitpath=git@github.com:/EvolveMedia/tp_dns

dnsintmasters="app1v-dnsint.tp.prd.lax.gnmedia.net"
#dnspubmasters="app1v-dnsext.tp.prd.lax.gnmedia.net"
dnspubmasters=""
dnsintslaves=$(echo app{1,2,3,4}v-dns.tp.prd.lax.gnmedia.net)
#dnsintslaves=$(echo app{1,2,3,4}v-dns.tp.prd.lax.gnmedia.net uid1v-gstaples.tp.dev.lax.gnmedia.net)
#dnspubslaves=$(echo ns{3,4,5,6}.gorillanation.com)
dnspubslaves=$()
#dnsalsonotify="192.168.1.175"
dnsalsonotify=""

#The checks are run agains the next fqdn and IP 
checkfqdn="vpn.gorillanation.com"
checkip="63.139.86.7"

remoteuser=em-deploy

set -e  # bail at the first sign of error

zonerealdir="/etc/bind/zones${test}"
zonestgdir="/app/shared/zone-stage${test}/$timestamp"
zonebakdir="/app/shared/zone-backup${test}"
zonebakdirts="$zonebakdir/$timestamp"

dnsmasterconfdir="/etc/bind/${test+conftest}"
dnsmastercheck="sudo /usr/sbin/named-checkconf -z $dnsmasterconfdir/named.conf"

#if [ "$slavepush" == "no" ];then
#  dnsrestart="/usr/bin/sudo /etc/init.d/named reload"
#else
#  dnsrestart="/usr/bin/sudo /etc/init.d/named restart"
#fi

dnsrestart="/usr/bin/sudo /etc/init.d/named restart"

ssh="/usr/bin/ssh -t"
rsync="/usr/bin/rsync -avze $ssh"

email=puppetmasters@gorillanation.com,internal_it@evolvemediallc.com



#################################################
### No user-serviceable parts below this line ###
#################################################
tmpdir=/tmp/dnspush-$$.$RANDOM
mkdir $tmpdir
if [ $(ls -d /tmp/dnspush-* | wc -l) -gt 1 ];then
    rm -rf $tmpdir
    echo "Another dnspush is running or has failed." 1>&2
    echo "Investigate " /tmp/dnspush-* " and run $0 --clean" 1>&2
    exit 1
fi
cd $tmpdir
#svn co -r $revision $dnssvnpath
#cd dns

git clone $dnsgitpath dns
cd dns
git checkout $revision

if [ "HEAD" == "$revision" ];then
#   revision=$(svnversion)
    revision=$(git rev-parse HEAD)
    echo $revision
    sleep 2
fi
if [ -f ~/.dnspush-last-revision ];then
   lastrevision=$(cat ~/.dnspush-last-revision)
else
   lastrevision=""
fi

rm -f ~/dnspush-diff
if [ -n "$lastrevision" -a "$revision" == "$lastrevision" ];then
   echo "No changes, GIT rev $revision was previously pushed" && sleep 2
   echo "No changes, $revision was previously pushed" > ~/dnspush-diff
#elif [ -n "$lastrevision" -a "$((revision-lastrevision))" -lt 150 ];then
elif [ -n "$lastrevision" -a "$revision" != "$lastrevision" ];then
   echo "Pushing $lastrevision -> $revision" && sleep 2
   echo "Pushing $lastrevision -> $revision" > ~/dnspush-diff
   git diff $lastrevision $revision >> ~/dnspush-diff
   git log $lastrevision..$revision >> ~/dnspush-diff

else
   echo "I don't know what changes are being pushed. Earth is spinning backwards or something." > ~/dnspush-diff
fi

echo "*** Generating zone confs..."
cd configs
./mastergenerator
./slavegenerator
rm -f */zone-table
if [ -n "$(git status -s */named-zones-generated.conf)" ];then

   git diff */named-zones-generated.conf
   echo "Zone configuration has changed. Will do a full push..."
   slavepush=yes
   sleep 4
   if [ -z "$test" ];then
      git add .
      git commit -m "Generated zone conf" */named-slaves-generated.conf */named-zones-generated.conf
      git push
   fi

fi
cd ..
find $tmpdir -name .git | xargs rm -rf
mkdir pub



####
#### Step 1
#### Check the zone files and create "pub" versions
#### The "zones" directory gets the internal files straight from svn
####
cd zones
#echo "Foome broken" >> ./real-moms.com.hosts
for file in $(find . -type f -a -not \( -name named.ca -o -name .\* \) );do

  # named-checkzone requires zone name for checking, but it might
  # take a few tries to figure it out.
  zone=$(cat $file | awk '$3=="SOA" {print $1}' | head -1)
  if [ -z "$zone" -o "@" = "$zone" ];then
     zone=$(cat $file | awk '$1=="$ORIGIN" {print $2}' | head -1)
  fi
  if [ -z "$zone" -o "@" = "$zone" ];then
     zone=$(basename $file .hosts)
  fi
  if [ -z "$zone" ];then
     zone="@"
  fi


  /usr/sbin/named-checkzone -q -n fail -k fail $zone $file || {
     # Do it again to show the error
     echo "Failed ($zone) $file"
     /usr/sbin/named-checkzone -n fail -k fail $zone $file
     exit 1
   }
  echo "Checked $file ($zone): success"

  mkdir -p ../pub/$(dirname $file)
  sed \
       -e '/[[:space:]]NS[[:space:]]/s/ns1v.lax1/ns5/' \
       -e '/[[:space:]]NS[[:space:]]/s/ns2v.lax1/ns6/' \
       -e '/[[:space:]]NS[[:space:]]/s/ns1v.lax2/ns3/' \
       -e '/[[:space:]]NS[[:space:]]/s/ns2v.lax2/ns4/' \
       -e '/[[:space:]]NS[[:space:]]/s/app1v.dns.tp.prd.lax/ns3/' \
       -e '/[[:space:]]NS[[:space:]]/s/app2v.dns.tp.prd.lax/ns4/' \
       -e '/[[:space:]]NS[[:space:]]/s/app3v.dns.tp.prd.lax/ns5/' \
       -e '/[[:space:]]NS[[:space:]]/s/app4v.dns.tp.prd.lax/ns6/' \
       -e '/[[:space:]]NS[[:space:]][[:space:]]*ns1v.lax3/d' \
       -e '/[[:space:]]NS[[:space:]][[:space:]]*ns2v.lax3/d' \
       < $file > ../pub/$file

       # This is testing ... one day this will apply to all zones
       case $zone in
          *) sed -i -e '/[[:space:]]10\.1[012]\./d' -e '/[[:space:]]10\.2\./d' ../pub/$file;;
       esac 

  sed -i /dnsmadeeasy/d $file
  /usr/sbin/named-checkzone -q -n fail -k fail $zone ../pub/$file || {
     # Do it again to show the error
     echo "Failed ($zone) ../pub/$file"
     /usr/sbin/named-checkzone -n fail -k fail $zone ../pub/$file
     exit 1
   }
  echo "Checked: ../pub/$file ($zone): success"
  rm -rf ../pub/internal

done
cp named.ca ../pub/named.ca
echo "All zone files created and checked."
echo
cd ..



####
#### Step 2
#### Some sanity checks on the config files (named-checkconfig is run later)
####
cd configs
for file in $(cat app1v-dnsint/named-zones-generated.conf | awk '$1=="file" {print $2}' | sed 's/.*\"\(.*\)\".*/\1/' | grep -v ^/)
    do
    echo -n "From internal config, checking if ../zones/$file exists... "
    if ! test -f ../zones/$file;then
        echo "no. Go fix it."
        exit 1
    fi
    echo "yes"
done

#for file in $(cat app1v-dnsext/named-zones-generated.conf | awk '$1=="file" {print $2}' | sed 's/.*\"\(.*\)\".*/\1/' | grep -v ^/)
#   do
#   echo -n "From external config, checking if ../pub/$file exists... "
#   if ! test -f ../pub/$file;then
#      echo "no. Go fix it."
#      exit 1
#   else
#      echo "yes"
#   fi
#   done
cd ..



####
#### Step 3
#### Copy zone files to the dns servers, manage backups, etc.
####
for server in $dnsintmasters $dnspubmasters;do
   echo "*** Making directories and managing backups on $server"
   $ssh $server mkdir $tmpdir || exit 1
   $ssh $server mkdir -p $zonerealdir $zonebakdir || exit 1
   $ssh $server "find $zonebakdir/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] -type d -mtime +10 -exec rm -rf {} \; ; cp -rp $zonerealdir $zonebakdirts;" > /dev/null 2>&1 || :
done

sleep 1
copyzones() {
   pwd
   echo "*** $1: staging files to $server"
   scp -rp $1/* $server:$tmpdir/ || { e=$?; echo Error: $e; exit $e; }
   echo "*** $1: files staged to $server"
   $ssh $server "rsync -av --delete $tmpdir/. $zonerealdir/. || exit 1; rm -rf $tmpdir"
   echo "*** $1: files copied from stage to $server:$zonerealdir/"
}
for server in $dnsintmasters;do 
   copyzones zones
done

for server in $dnspubmasters;do
   copyzones pub
done



####
#### Step 4
#### Push the config files, unchanged, straight from subversion
####
# Internal Masters go first
if [ -z "$test" ];then
   echo $revision > ~/.dnspush-last-revision
   cat ~/dnspush-diff | mail -s "[sysadmins] Pushing r$revision DNS to servers by $SUDO_USER" $email
   logger -t dnspush "Pushing r$revision DNS to servers"
fi
echo
echo "*** Pushing configs to Master Servers dnsint and dnsext...\n"
for server in $dnsintmasters $dnspubmasters;do
  if [ -n "$test" ];then
     $ssh $server mkdir -p $dnsmasterconfdir || exit 1
     sed -i 's/\/bind\//\/bind\/conftest\//' configs/${server%%.*}/named.conf || exit 1
     sed -i 's/\/zones/\/zones-test/' configs/${server%%.*}/named.conf.options || exit 1
  fi
  $rsync configs/${server%%.*}/. $server:$dnsmasterconfdir || exit 1

  $ssh $server $dnsmastercheck
  result=$?
  if [ $result -ne 0 ] ; then
     echo "SSH or bind checks failed server $server with return code $result"
     exit $result
  fi
done

echo
echo "*** Config checks on Master Servers dnsint and dnsext: PASSED"
echo
if [ -z "$test" ];then
  for server in $dnsintmasters $dnspubmasters;do
     $ssh $server $dnsrestart
     result=$?
     if [ $result -ne 0 ] ; then
        echo "SSH or bind checks failed server $server with return code $result"
        exit $result
     fi
     sleep 3
  done
fi

if [ "yes" = "$slavepush" ];then
   # Internal Slaves go second
   echo
   echo "*** Pushing configs to Internal Slave Servers (in the PEAK network)..."
   LOCALPATH="intdns"
   LOCALTMPPATH="/var/tmp/$LOCALPATH/"
#   DNSSVNPATH="https://svn.gnmedia.net/sysadmins/trunk/dns/configs/internal-slaves/"
   DNSGITPATH="git@github.com:/EvolveMedia/tp_dns"
   REMOTEPATH="/etc/bind/"

   rm -rf $LOCALTMPPATH || exit 1
   mkdir $LOCALTMPPATH
#   svn export $DNSSVNPATH $LOCALTMPPATH || exit 1

#adding another temp dir, git repos can't be exported as svn ones
  tmpdir2=/tmp/dnspushcf-$$.$RANDOM
  mkdir $tmpdir2
  if [ $(ls -d /tmp/dnspushcf-* | wc -l) -gt 1 ];then
      rm -rf /tmp/dnspushcf-*
      mkdir $tmpdir2
  fi
  cd $tmpdir2

   echo "clonning into $tmpdir2" 
   git clone $dnsgitpath dns || exit 1
   cd dns/configs/internal-slaves/
   cp * $LOCALTMPPATH
   cd /tmp && rm -rf $tmpdir2

   if [ "$testmode" != "yes" ];then
       for server in $dnsintslaves;do
           echo
           echo "Syncing $LOCALTMPPATH -> $remoteuser@$server:$REMOTEPATH"
           $rsync $LOCALTMPPATH $remoteuser@$server:$REMOTEPATH
           $ssh $server sudo /usr/sbin/named-checkconf -z /etc/bind/named.conf
           RESULTCODE=$?
           if [ $RESULTCODE -ne 0 ] ; then
               echo SSH or bind checks failed server $server with return code $RESULTCODE
               exit $RESULTCODE
           fi
           $ssh $server $dnsrestart
       done
   fi
   sleep 3

   # External Slaves go third
   echo  ""
#   echo "*** Pushing configs to External Slave Servers outside of GN network..."
#   LOCALPATH="extdns"
#   LOCALTMPPATH="/var/tmp/$LOCALPATH/"
##   DNSSVNPATH="https://svn.gnmedia.net/sysadmins/trunk/dns/configs/external-slaves/"
#   DNSGITPATH="git@github.com:/EvolveMedia/tp_dns"
#   REMOTEPATH="/etc/named/"

#   rm -rf $LOCALTMPPATH || exit 1
#   mkdir $LOCALTMPPATH
##   svn export $DNSSVNPATH $LOCALTMPPATH || exit 1
   
#  tmpdir2=/tmp/dnspushcf-$$.$RANDOM
#  mkdir $tmpdir2
#  if [ $(ls -d /tmp/dnspushcf-* | wc -l) -gt 1 ];then
#      rm -rf /tmp/dnspushcf-*
#      mkdir $tmpdir2
#  fi
#  cd $tmpdir2

#  git clone $dnsgitpath dns || exit 1
#   cd dns/configs/external-slaves/
#   cp * $LOCALTMPPATH
#   cd /tmp && rm -rf $tmpdir2


   if [ "$testmode" != "yes" ];then
       for server in $dnspubslaves;do
           echo
           echo "Syncing $LOCALTMPPATH -> $remoteuser@$server:$REMOTEPATH"
           $rsync $LOCALTMPPATH $remoteuser@$server:$REMOTEPATH
           $ssh $server sudo /usr/sbin/named-checkconf /etc/named/named.conf
           RESULTCODE=$?
           if [ $RESULTCODE -ne 0 ] ; then
               echo SSH or bind checks failed server $server with return code $RESULTCODE
               exit $RESULTCODE
           fi
           $ssh $server $dnsrestart
       done
   fi

fi

if [ -z "$test" ];then
   echo -n "Sleeping 5 seconds to let slave servers xfer changes... "
   sleep 5
   echo "done."
fi



####
#### Step 5
#### Some final checks
####
echo 
echo "*** All Done!"
echo
echo "*** Some final checks..."
echo
for a in $dnsintmasters $dnsintslaves $dnspubmasters $dnspubslaves ;do
   echo -n "*** $a says: "
   output=$(host $checkfqdn $a)
   echo "$output" | grep "has address"
   echo "$output" | grep "has address" | grep -q $checkip || exit 1
done

if [ -z "$test" ];then
#Find the most recently modified/added zone file and check the soa
# record with the other nameservers
echo
echo "*** SOA lookup verification ***"
rm -rf zones
#svn co -r $revision $dnssvnpath/zones >/dev/null 2>&1

tmpdir3=/tmp/dnspusht-$$.$RANDOM
mkdir $tmpdir3
  if [ $(ls -d /tmp/dnspusht-* | wc -l) -gt 1 ];then
      rm -rf /tmp/dnspusht-*
      mkdir $tmpdir3
  fi
cd $tmpdir3

git clone $dnsgitpath dns
cd dns/zones || exit 1
#newestzonefile=$(svn log -v 2>/dev/null | egrep "^   (M|A)" | grep .hosts$ | head -1 | sed 's/.*\/zones\///')
newestzonefile=$(git --no-pager log --name-status --oneline 2>/dev/null | egrep "^(M|A)" | grep .hosts$ | head -1 | sed 's/.*zones\///')
if [ -z "$newestzonefile" ];then
   echo "Unable to determine most recent zone file modification."
   echo "Something wrong with subversion?"
   exit 1;
fi
newestzoneserial=$(cat $newestzonefile | grep -A 5 SOA |sed 's/;.*//' | xargs echo | sed 's/.*([[:space:]]*\([[:digit:]]*\).*/\1/')
newestzone=$(basename $newestzonefile .hosts)
echo "   *** Looks like the most recently modified zone is $newestzone ($newestzonefile) with serial $newestzoneserial."

testdnsservers=`
  case $newestzonefile in
    internal*) echo $dnsintmasters $dnsintslaves $dnsalsonotify ;;
    external*) echo $dnspubmasters $dnspubslaves ;;
    *) echo $dnsintmasters $dnspubmasters $dnsintslaves $dnspubslaves $dnsalsonotify ;;
  esac `
for a in $testdnsservers;do
   foundserial=$(host -t soa $newestzone $a | grep "has SOA record" | awk '{print $7}')
   if [ "$foundserial" == "$newestzoneserial" ];then
      echo "    *** $a has serial $foundserial: GOOD"
   else
      echo "    *** $a has serial $foundserial: NOT YET, trying again in 10 seconds..."
      sleep 5
      while sleep 5;do  # make sleep the condition so that ctrl-c is easily trapped for free
         foundserial=$(host -t soa $newestzone $a | grep "has SOA record" | awk '{print $7}')
         if [ "$foundserial" == "$newestzoneserial" ];then
            echo "    *** $a has serial $foundserial: GOOD"
            break
         fi
         echo "    *** $a has serial $foundserial: NOT YET, trying again in 5 seconds..."
      done
   fi
done
fi
cd ..

echo
echo "*** Checking for AD Forwarders ***"
cd $tmpdir
cd dns
cd pub
dnsadzonechecker
cd ..

cd
#rm -rf $tmpdir
#RUNUSER=`who -m | awk '{print $1;}'`
#PUSHLOG="~$RUNUSER/r53sync.log"
#eval PUSHLOG=$PUSHLOG
echo "*** Starting push to route53, this may take about 15 minutes (if every zone has been modified). ***"
echo "*** Output is saved to /home/em-deploy/r53sync.log ***"
WHORAN=`who -m | awk '{print $1;}'`
if [ "$r53fullsync" == "no" ];then  
    echo "[$(date)] route53 wrapper kicked off by $WHORAN" >> ~/r53sync.log
    /usr/local/bin/r53wrapper $tmpdir >> ~/r53sync.log < /dev/null 2>&1 &
else
    echo "[$(date)] route53 wrapper kicked off by $WHORAN ...DOING A FULL SYNC" >> ~/r53sync.log
    /usr/local/bin/r53wrapper -a $tmpdir >> ~/r53sync.log < /dev/null 2>&1 &
fi


[ -n "$test" ] && echo "*** TEST MODE ***"
echo "DNS Push Complete."
